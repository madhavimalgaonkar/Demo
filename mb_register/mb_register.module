<?php
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\StringTranslation\StringTranslationTrait;
use Drupal\mb_register\Manager\StepManager;
use Drupal\mb_register\Step\StepsEnum;
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Form\FormState;
/**
 * Implements hook_form_FORM_ID_alter.
 */

 /**
  * Step Id.
  *
  * @var \Drupal\mb_register\Step\StepsEnum
  */
  $stepId;

 /**
  * Multi steps of the form.
  *
  * @var \Drupal\mb_register\Step\StepInterface
  */
$step;

 /**
  * Step manager instance.
  *
  * @var \Drupal\mb_register\Manager\StepManager
  */
 $stepManager;

 /**
  * {@inheritdoc}
  */
// function __construct() {
//    $this->stepId = StepsEnum::STEP_ONE;
//    $this->stepManager = new StepManager();
//  }

 function mb_register_form_user_register_form_alter (&$form, &$form_state, $form_id) {
   $form['wrapper-messages'] = [
     '#type' => 'container',
     '#attributes' => [
       'id' => 'messages-wrapper',
     ],
   ];

   $form['wrapper'] = [
     '#type' => 'container',
     '#attributes' => [
       'id' => 'form-wrapper',
     ],
   ];
    $stepID = [
      1 => 'step-one',
      2 => 'step-two',
      3 => 'step-three',
      6 => 'step-finalize',
    ];

   // Get step from step manager.
  //  $form->step = $form->stepManager->getStep($form->stepId);
  foreach ($stepID as $key => $value) {
    $step = \Drupal\mb_register\Manager\StepManager::getStep($key);
    dsm($step);
  // Attach step form elements.
  //  $form['wrapper'] += $step->buildStepFormElements();

   // Attach buttons.
  //  $form['wrapper']['actions']['#type'] = 'actions';
  //  $buttons = \Drupal\mb_register\Step\StepInterface::getButtons();
  //  foreach ($buttons as $button) {
  //    /** @var \Drupal\mb_register\Button\ButtonInterface $button */
  //    $form['wrapper']['actions'][$button->getKey()] = $button->build();
   //
  //    if ($button->ajaxify()) {
  //      // Add ajax to button.
  //      $form['wrapper']['actions'][$button->getKey()]['#ajax'] = [
  //        'callback' => [$this, 'loadStep'],
  //        'wrapper' => 'form-wrapper',
  //        'effect' => 'fade',
  //      ];
  //    }
   //
  //    $callable = [$form, $button->getSubmitHandler()];
  //    if ($button->getSubmitHandler() && is_callable($callable)) {
  //      // Attach submit handler to button, so we can execute it later on..
  //      $form['wrapper']['actions'][$button->getKey()]['#submit_handler'] = $button->getSubmitHandler();
  //    }
  //  }
  }


   return $form;
 }

 /**
  * Ajax callback to load new step.
  *
  * @param array $form
  *   Form array.
  * @param \Drupal\Core\Form\FormStateInterface $form_state
  *   Form state interface.
  *
  * @return \Drupal\Core\Ajax\AjaxResponse
  *   Ajax response.
  */
function loadStep(array &$form, FormStateInterface $form_state) {
   $response = new AjaxResponse();

   $messages = drupal_get_messages();
   if (!empty($messages)) {
     // Form did not validate, get messages and render them.
     $messages = [
       '#theme' => 'status_messages',
       '#message_list' => $messages,
       '#status_headings' => [
         'status' => $this->t('Status message'),
         'error' => $this->t('Error message'),
         'warning' => $this->t('Warning message'),
       ],
     ];
     $response->addCommand(new HtmlCommand('#messages-wrapper', $messages));
   }
   else {
     // Remove messages.
     $response->addCommand(new HtmlCommand('#messages-wrapper', ''));
   }

   // Update Form.
   $response->addCommand(new HtmlCommand('#form-wrapper',
     $form['wrapper']));

   return $response;
 }

 /**
  * {@inheritdoc}
  */
function validateForm(array &$form, FormStateInterface $form_state) {
   $triggering_element = $form_state->getTriggeringElement();
   // Only validate if validation doesn't have to be skipped.
   // For example on "previous" button.
   if (empty($triggering_element['#skip_validation']) && $fields_validators = $this->step->getFieldsValidators()) {
     // Validate fields.
     foreach ($fields_validators as $field => $validators) {
       // Validate all validators for field.
       $field_value = $form_state->getValue($field);
       foreach ($validators as $validator) {
         if (!$validator->validates($field_value)) {
           $form_state->setErrorByName($field, $validator->getErrorMessage());
         }
       }
     }
   }
 }

 /**
  * {@inheritdoc}
  */
function submitForm(array &$form, FormStateInterface $form_state) {
   // Save filled values to step. So we can use them as default_value later on.
   $values = [];
   foreach ($this->step->getFieldNames() as $name) {
     $values[$name] = $form_state->getValue($name);
   }
   $this->step->setValues($values);
   // Add step to manager.
   $this->stepManager->addStep($this->step);
   // Set step to navigate to.
   $triggering_element = $form_state->getTriggeringElement();
   $this->stepId = $triggering_element['#goto_step'];

   // If an extra submit handler is set, execute it.
   // We already tested if it is callable before.
   if (isset($triggering_element['#submit_handler'])) {
     $this->{$triggering_element['#submit_handler']}($form, $form_state);
   }

   $form_state->setRebuild(TRUE);
 }

 /**
  * Submit handler for last step of form.
  *
  * @param array $form
  *   Form array.
  * @param \Drupal\Core\Form\FormStateInterface $form_state
  *   Form state interface.
  */
 function submitValues(array &$form, FormStateInterface $form_state) {
   // Submit all values to DB or do whatever you want on submit.
 }
